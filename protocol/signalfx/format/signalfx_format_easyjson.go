// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package signalfxformat

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	trace "github.com/signalfx/golib/v3/trace"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat(in *jlexer.Lexer, out *JSONLogHECV1List) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(JSONLogHECV1List, 0, 8)
			} else {
				*out = JSONLogHECV1List{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *JSONLogHECV1
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(JSONLogHECV1)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat(out *jwriter.Writer, in JSONLogHECV1List) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JSONLogHECV1List) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONLogHECV1List) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONLogHECV1List) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONLogHECV1List) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat1(in *jlexer.Lexer, out *JSONLogHECV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "time":
			if in.IsNull() {
				in.Skip()
				out.Time = nil
			} else {
				if out.Time == nil {
					out.Time = new(int64)
				}
				*out.Time = int64(in.Int64())
			}
		case "host":
			out.Host = string(in.String())
		case "source":
			out.Source = string(in.String())
		case "sourcetype":
			out.SourceType = string(in.String())
		case "fields":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Fields = make(map[string]interface{})
				} else {
					out.Fields = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Fields)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "index":
			out.Index = string(in.String())
		case "event":
			if m, ok := out.Event.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Event.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Event = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat1(out *jwriter.Writer, in JSONLogHECV1) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Time != nil {
		const prefix string = ",\"time\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(*in.Time))
	}
	if in.Host != "" {
		const prefix string = ",\"host\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Host))
	}
	if in.Source != "" {
		const prefix string = ",\"source\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Source))
	}
	if in.SourceType != "" {
		const prefix string = ",\"sourcetype\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.SourceType))
	}
	if len(in.Fields) != 0 {
		const prefix string = ",\"fields\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v5First := true
			for v5Name, v5Value := range in.Fields {
				if v5First {
					v5First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v5Name))
				out.RawByte(':')
				if m, ok := v5Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v5Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v5Value))
				}
			}
			out.RawByte('}')
		}
	}
	if in.Index != "" {
		const prefix string = ",\"index\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"event\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		if m, ok := in.Event.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Event.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Event))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONLogHECV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONLogHECV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONLogHECV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONLogHECV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat1(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat2(in *jlexer.Lexer, out *JSONEventV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(JSONEventV2, 0, 8)
			} else {
				*out = JSONEventV2{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v6 *EventSendFormatV2
			if in.IsNull() {
				in.Skip()
				v6 = nil
			} else {
				if v6 == nil {
					v6 = new(EventSendFormatV2)
				}
				(*v6).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v6)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat2(out *jwriter.Writer, in JSONEventV2) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v7, v8 := range in {
			if v7 > 0 {
				out.RawByte(',')
			}
			if v8 == nil {
				out.RawString("null")
			} else {
				(*v8).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JSONEventV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONEventV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONEventV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONEventV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat2(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat3(in *jlexer.Lexer, out *JSONDatapointV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		if !in.IsDelim('}') {
			*out = make(JSONDatapointV2)
		} else {
			*out = nil
		}
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v9 []*BodySendFormatV2
			if in.IsNull() {
				in.Skip()
				v9 = nil
			} else {
				in.Delim('[')
				if v9 == nil {
					if !in.IsDelim(']') {
						v9 = make([]*BodySendFormatV2, 0, 8)
					} else {
						v9 = []*BodySendFormatV2{}
					}
				} else {
					v9 = (v9)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *BodySendFormatV2
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(BodySendFormatV2)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					v9 = append(v9, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
			(*out)[key] = v9
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat3(out *jwriter.Writer, in JSONDatapointV2) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v11First := true
		for v11Name, v11Value := range in {
			if v11First {
				v11First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v11Name))
			out.RawByte(':')
			if v11Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
				out.RawString("null")
			} else {
				out.RawByte('[')
				for v12, v13 := range v11Value {
					if v12 > 0 {
						out.RawByte(',')
					}
					if v13 == nil {
						out.RawString("null")
					} else {
						(*v13).MarshalEasyJSON(out)
					}
				}
				out.RawByte(']')
			}
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v JSONDatapointV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONDatapointV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONDatapointV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONDatapointV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat3(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat4(in *jlexer.Lexer, out *JSONDatapointV1) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "source":
			out.Source = string(in.String())
		case "metric":
			out.Metric = string(in.String())
		case "value":
			out.Value = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat4(out *jwriter.Writer, in JSONDatapointV1) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix[1:])
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix)
		out.String(string(in.Metric))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.Float64(float64(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v JSONDatapointV1) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v JSONDatapointV1) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *JSONDatapointV1) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *JSONDatapointV1) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat4(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat5(in *jlexer.Lexer, out *InputSpanList) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(InputSpanList, 0, 8)
			} else {
				*out = InputSpanList{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v14 *InputSpan
			if in.IsNull() {
				in.Skip()
				v14 = nil
			} else {
				if v14 == nil {
					v14 = new(InputSpan)
				}
				(*v14).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v14)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat5(out *jwriter.Writer, in InputSpanList) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v15, v16 := range in {
			if v15 > 0 {
				out.RawByte(',')
			}
			if v16 == nil {
				out.RawString("null")
			} else {
				(*v16).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v InputSpanList) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputSpanList) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputSpanList) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputSpanList) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat5(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat6(in *jlexer.Lexer, out *InputSpan) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(float64)
				}
				*out.Timestamp = float64(in.Float64())
			}
		case "duration":
			if in.IsNull() {
				in.Skip()
				out.Duration = nil
			} else {
				if out.Duration == nil {
					out.Duration = new(float64)
				}
				*out.Duration = float64(in.Float64())
			}
		case "annotations":
			if in.IsNull() {
				in.Skip()
				out.Annotations = nil
			} else {
				in.Delim('[')
				if out.Annotations == nil {
					if !in.IsDelim(']') {
						out.Annotations = make([]*InputAnnotation, 0, 8)
					} else {
						out.Annotations = []*InputAnnotation{}
					}
				} else {
					out.Annotations = (out.Annotations)[:0]
				}
				for !in.IsDelim(']') {
					var v17 *InputAnnotation
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(InputAnnotation)
						}
						(*v17).UnmarshalEasyJSON(in)
					}
					out.Annotations = append(out.Annotations, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "binaryAnnotations":
			if in.IsNull() {
				in.Skip()
				out.BinaryAnnotations = nil
			} else {
				in.Delim('[')
				if out.BinaryAnnotations == nil {
					if !in.IsDelim(']') {
						out.BinaryAnnotations = make([]*BinaryAnnotation, 0, 8)
					} else {
						out.BinaryAnnotations = []*BinaryAnnotation{}
					}
				} else {
					out.BinaryAnnotations = (out.BinaryAnnotations)[:0]
				}
				for !in.IsDelim(']') {
					var v18 *BinaryAnnotation
					if in.IsNull() {
						in.Skip()
						v18 = nil
					} else {
						if v18 == nil {
							v18 = new(BinaryAnnotation)
						}
						(*v18).UnmarshalEasyJSON(in)
					}
					out.BinaryAnnotations = append(out.BinaryAnnotations, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "traceId":
			out.TraceID = string(in.String())
		case "name":
			if in.IsNull() {
				in.Skip()
				out.Name = nil
			} else {
				if out.Name == nil {
					out.Name = new(string)
				}
				*out.Name = string(in.String())
			}
		case "parentId":
			if in.IsNull() {
				in.Skip()
				out.ParentID = nil
			} else {
				if out.ParentID == nil {
					out.ParentID = new(string)
				}
				*out.ParentID = string(in.String())
			}
		case "id":
			out.ID = string(in.String())
		case "kind":
			if in.IsNull() {
				in.Skip()
				out.Kind = nil
			} else {
				if out.Kind == nil {
					out.Kind = new(string)
				}
				*out.Kind = string(in.String())
			}
		case "debug":
			if in.IsNull() {
				in.Skip()
				out.Debug = nil
			} else {
				if out.Debug == nil {
					out.Debug = new(bool)
				}
				*out.Debug = bool(in.Bool())
			}
		case "shared":
			if in.IsNull() {
				in.Skip()
				out.Shared = nil
			} else {
				if out.Shared == nil {
					out.Shared = new(bool)
				}
				*out.Shared = bool(in.Bool())
			}
		case "localEndpoint":
			if in.IsNull() {
				in.Skip()
				out.LocalEndpoint = nil
			} else {
				if out.LocalEndpoint == nil {
					out.LocalEndpoint = new(trace.Endpoint)
				}
				easyjson3b0ebf6aDecodeGithubComSignalfxGolibV3Trace(in, out.LocalEndpoint)
			}
		case "remoteEndpoint":
			if in.IsNull() {
				in.Skip()
				out.RemoteEndpoint = nil
			} else {
				if out.RemoteEndpoint == nil {
					out.RemoteEndpoint = new(trace.Endpoint)
				}
				easyjson3b0ebf6aDecodeGithubComSignalfxGolibV3Trace(in, out.RemoteEndpoint)
			}
		case "tags":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Tags = make(map[string]string)
				} else {
					out.Tags = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v19 string
					v19 = string(in.String())
					(out.Tags)[key] = v19
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat6(out *jwriter.Writer, in InputSpan) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix[1:])
		if in.Timestamp == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Timestamp))
		}
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		if in.Duration == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Duration))
		}
	}
	{
		const prefix string = ",\"annotations\":"
		out.RawString(prefix)
		if in.Annotations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Annotations {
				if v20 > 0 {
					out.RawByte(',')
				}
				if v21 == nil {
					out.RawString("null")
				} else {
					(*v21).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"binaryAnnotations\":"
		out.RawString(prefix)
		if in.BinaryAnnotations == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.BinaryAnnotations {
				if v22 > 0 {
					out.RawByte(',')
				}
				if v23 == nil {
					out.RawString("null")
				} else {
					(*v23).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"traceId\":"
		out.RawString(prefix)
		out.String(string(in.TraceID))
	}
	if in.Name != nil {
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(*in.Name))
	}
	if in.ParentID != nil {
		const prefix string = ",\"parentId\":"
		out.RawString(prefix)
		out.String(string(*in.ParentID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.String(string(in.ID))
	}
	if in.Kind != nil {
		const prefix string = ",\"kind\":"
		out.RawString(prefix)
		out.String(string(*in.Kind))
	}
	if in.Debug != nil {
		const prefix string = ",\"debug\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Debug))
	}
	if in.Shared != nil {
		const prefix string = ",\"shared\":"
		out.RawString(prefix)
		out.Bool(bool(*in.Shared))
	}
	if in.LocalEndpoint != nil {
		const prefix string = ",\"localEndpoint\":"
		out.RawString(prefix)
		easyjson3b0ebf6aEncodeGithubComSignalfxGolibV3Trace(out, *in.LocalEndpoint)
	}
	if in.RemoteEndpoint != nil {
		const prefix string = ",\"remoteEndpoint\":"
		out.RawString(prefix)
		easyjson3b0ebf6aEncodeGithubComSignalfxGolibV3Trace(out, *in.RemoteEndpoint)
	}
	if len(in.Tags) != 0 {
		const prefix string = ",\"tags\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v24First := true
			for v24Name, v24Value := range in.Tags {
				if v24First {
					v24First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v24Name))
				out.RawByte(':')
				out.String(string(v24Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputSpan) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputSpan) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputSpan) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputSpan) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat6(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxGolibV3Trace(in *jlexer.Lexer, out *trace.Endpoint) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "serviceName":
			if in.IsNull() {
				in.Skip()
				out.ServiceName = nil
			} else {
				if out.ServiceName == nil {
					out.ServiceName = new(string)
				}
				*out.ServiceName = string(in.String())
			}
		case "ipv4":
			if in.IsNull() {
				in.Skip()
				out.Ipv4 = nil
			} else {
				if out.Ipv4 == nil {
					out.Ipv4 = new(string)
				}
				*out.Ipv4 = string(in.String())
			}
		case "ipv6":
			if in.IsNull() {
				in.Skip()
				out.Ipv6 = nil
			} else {
				if out.Ipv6 == nil {
					out.Ipv6 = new(string)
				}
				*out.Ipv6 = string(in.String())
			}
		case "port":
			if in.IsNull() {
				in.Skip()
				out.Port = nil
			} else {
				if out.Port == nil {
					out.Port = new(int32)
				}
				*out.Port = int32(in.Int32())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxGolibV3Trace(out *jwriter.Writer, in trace.Endpoint) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ServiceName != nil {
		const prefix string = ",\"serviceName\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(*in.ServiceName))
	}
	if in.Ipv4 != nil {
		const prefix string = ",\"ipv4\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Ipv4))
	}
	if in.Ipv6 != nil {
		const prefix string = ",\"ipv6\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.Ipv6))
	}
	if in.Port != nil {
		const prefix string = ",\"port\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int32(int32(*in.Port))
	}
	out.RawByte('}')
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat7(in *jlexer.Lexer, out *InputAnnotation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "endpoint":
			if in.IsNull() {
				in.Skip()
				out.Endpoint = nil
			} else {
				if out.Endpoint == nil {
					out.Endpoint = new(trace.Endpoint)
				}
				easyjson3b0ebf6aDecodeGithubComSignalfxGolibV3Trace(in, out.Endpoint)
			}
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(float64)
				}
				*out.Timestamp = float64(in.Float64())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(string)
				}
				*out.Value = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat7(out *jwriter.Writer, in InputAnnotation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix[1:])
		if in.Endpoint == nil {
			out.RawString("null")
		} else {
			easyjson3b0ebf6aEncodeGithubComSignalfxGolibV3Trace(out, *in.Endpoint)
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		if in.Timestamp == nil {
			out.RawString("null")
		} else {
			out.Float64(float64(*in.Timestamp))
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if in.Value == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Value))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InputAnnotation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InputAnnotation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InputAnnotation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InputAnnotation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat7(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat8(in *jlexer.Lexer, out *EventSendFormatV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "eventType":
			out.EventType = string(in.String())
		case "category":
			if in.IsNull() {
				in.Skip()
				out.Category = nil
			} else {
				if out.Category == nil {
					out.Category = new(string)
				}
				*out.Category = string(in.String())
			}
		case "dimensions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Dimensions = make(map[string]string)
				} else {
					out.Dimensions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v25 string
					v25 = string(in.String())
					(out.Dimensions)[key] = v25
					in.WantComma()
				}
				in.Delim('}')
			}
		case "properties":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Properties = make(map[string]interface{})
				} else {
					out.Properties = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v26 interface{}
					if m, ok := v26.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v26.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v26 = in.Interface()
					}
					(out.Properties)[key] = v26
					in.WantComma()
				}
				in.Delim('}')
			}
		case "timestamp":
			if in.IsNull() {
				in.Skip()
				out.Timestamp = nil
			} else {
				if out.Timestamp == nil {
					out.Timestamp = new(int64)
				}
				*out.Timestamp = int64(in.Int64())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat8(out *jwriter.Writer, in EventSendFormatV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"eventType\":"
		out.RawString(prefix[1:])
		out.String(string(in.EventType))
	}
	{
		const prefix string = ",\"category\":"
		out.RawString(prefix)
		if in.Category == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Category))
		}
	}
	{
		const prefix string = ",\"dimensions\":"
		out.RawString(prefix)
		if in.Dimensions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v27First := true
			for v27Name, v27Value := range in.Dimensions {
				if v27First {
					v27First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v27Name))
				out.RawByte(':')
				out.String(string(v27Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		if in.Properties == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v28First := true
			for v28Name, v28Value := range in.Properties {
				if v28First {
					v28First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v28Name))
				out.RawByte(':')
				if m, ok := v28Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v28Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v28Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		if in.Timestamp == nil {
			out.RawString("null")
		} else {
			out.Int64(int64(*in.Timestamp))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EventSendFormatV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventSendFormatV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventSendFormatV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventSendFormatV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat8(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat9(in *jlexer.Lexer, out *BodySendFormatV2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "metric":
			out.Metric = string(in.String())
		case "timestamp":
			out.Timestamp = int64(in.Int64())
		case "value":
			if m, ok := out.Value.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Value.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Value = in.Interface()
			}
		case "dimensions":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Dimensions = make(map[string]string)
				} else {
					out.Dimensions = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v29 string
					v29 = string(in.String())
					(out.Dimensions)[key] = v29
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat9(out *jwriter.Writer, in BodySendFormatV2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"metric\":"
		out.RawString(prefix[1:])
		out.String(string(in.Metric))
	}
	{
		const prefix string = ",\"timestamp\":"
		out.RawString(prefix)
		out.Int64(int64(in.Timestamp))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if m, ok := in.Value.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Value.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Value))
		}
	}
	{
		const prefix string = ",\"dimensions\":"
		out.RawString(prefix)
		if in.Dimensions == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v30First := true
			for v30Name, v30Value := range in.Dimensions {
				if v30First {
					v30First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v30Name))
				out.RawByte(':')
				out.String(string(v30Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BodySendFormatV2) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BodySendFormatV2) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BodySendFormatV2) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BodySendFormatV2) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat9(l, v)
}
func easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat10(in *jlexer.Lexer, out *BinaryAnnotation) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "endpoint":
			if in.IsNull() {
				in.Skip()
				out.Endpoint = nil
			} else {
				if out.Endpoint == nil {
					out.Endpoint = new(trace.Endpoint)
				}
				easyjson3b0ebf6aDecodeGithubComSignalfxGolibV3Trace(in, out.Endpoint)
			}
		case "key":
			if in.IsNull() {
				in.Skip()
				out.Key = nil
			} else {
				if out.Key == nil {
					out.Key = new(string)
				}
				*out.Key = string(in.String())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(interface{})
				}
				if m, ok := (*out.Value).(easyjson.Unmarshaler); ok {
					m.UnmarshalEasyJSON(in)
				} else if m, ok := (*out.Value).(json.Unmarshaler); ok {
					_ = m.UnmarshalJSON(in.Raw())
				} else {
					*out.Value = in.Interface()
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat10(out *jwriter.Writer, in BinaryAnnotation) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"endpoint\":"
		out.RawString(prefix[1:])
		if in.Endpoint == nil {
			out.RawString("null")
		} else {
			easyjson3b0ebf6aEncodeGithubComSignalfxGolibV3Trace(out, *in.Endpoint)
		}
	}
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix)
		if in.Key == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Key))
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		if in.Value == nil {
			out.RawString("null")
		} else {
			if m, ok := (*in.Value).(easyjson.Marshaler); ok {
				m.MarshalEasyJSON(out)
			} else if m, ok := (*in.Value).(json.Marshaler); ok {
				out.Raw(m.MarshalJSON())
			} else {
				out.Raw(json.Marshal(*in.Value))
			}
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BinaryAnnotation) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BinaryAnnotation) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3b0ebf6aEncodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BinaryAnnotation) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BinaryAnnotation) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3b0ebf6aDecodeGithubComSignalfxIngestProtocolsProtocolSignalfxFormat10(l, v)
}
